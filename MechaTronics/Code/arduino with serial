#include <Arduino_CAN.h>

const uint32_t JOYSTICK_CAN_ID = 0x02000400;
const uint32_t STEP_CAN_ID     = 0x0A040000;
const uint32_t PROFILE_ID      = 0x051;
const int      STANDBY_PIN     = 7;

uint8_t can_data[2]        = {0x00, 0x00};
bool    can_active         = false;
unsigned long last_can_send  = 0;
unsigned long last_step_send = 0;

const unsigned long CAN_SEND_INTERVAL_MS  = 1;
const unsigned long STEP_SEND_INTERVAL_MS = 684;

void setup() {
  Serial.begin(115200);
  while (!Serial) {} 

  pinMode(STANDBY_PIN, OUTPUT);
  digitalWrite(STANDBY_PIN, LOW);

  if (!CAN.begin(CanBitRate::BR_125k)) {
    Serial.println("CAN init failed");
    while (1);
  }

  // Update this line to avoid confusion:
  Serial.println("Ready. Send any byte to start CAN transmission.");
}

void loop() {
  // — If any byte arrives, enable CAN (once), then optionally read joystick bytes —
  if (Serial.available()) {
    char cmd = Serial.read();  // consume the first byte

    if (!can_active) {
      can_active = true;
      Serial.println("CAN transmission ENABLED");
      // Immediately send PROFILE packet:
      uint8_t profile_data[4] = { 0x84, 0x00, 0x00, 0x01 };
      CanMsg msg(CanStandardId(PROFILE_ID), 4, profile_data);
      CAN.write(msg);
    }

    // If a second byte is waiting, treat (cmd, next) as joystick data:
    delay(5);
    if (Serial.available()) {
      can_data[0] = (uint8_t)cmd;
      can_data[1] = (uint8_t)Serial.read();
      Serial.print("Joystick set to: ");
      Serial.print(can_data[0], HEX); Serial.print(" ");
      Serial.println(can_data[1], HEX);
    }
  }

  unsigned long now = millis();

  // Joystick CAN message (every 1 ms)
  if (can_active && (now - last_can_send >= CAN_SEND_INTERVAL_MS)) {
    last_can_send = now;
    CanMsg joystick_msg(CanExtendedId(JOYSTICK_CAN_ID), 2, can_data);
    CAN.write(joystick_msg);
  }

  // Step CAN message (every 684 ms)
  if (can_active && (now - last_step_send >= STEP_SEND_INTERVAL_MS)) {
    last_step_send = now;
    uint8_t step_data[1] = {0x00};
    CanMsg step_msg(CanExtendedId(STEP_CAN_ID), 1, step_data);
    CAN.write(step_msg);
  }
}
